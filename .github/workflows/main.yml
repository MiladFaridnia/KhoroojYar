name: Android CI

on: 
  push:
    branches: [ master ]
# Uncomment the following lines if you also want to run this workflow on pull requests:
#   pull_request:
#     branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - uses: actions/checkout@v4.2.2

      # Step 2: Cache Gradle Dependencies
      # This step caches the Gradle dependencies to improve build times by avoiding redownloading dependencies.
      # The `key` is based on the content of Gradle-related files (e.g., build.gradle, settings.gradle).
      - name: Cache Gradle Dependencies
        uses: actions/cache@v4.2.0
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/*.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 3: Set up JDK 17
      # This step ensures Java 17 is installed as it is required by the Android Gradle Plugin.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      # Step 4: Grant execute permissions to Gradle Wrapper
      # Ensures that the Gradle Wrapper script has the necessary execution permissions.
      - name: Grant execute permission for Gradlew
        run: chmod +x gradlew

      # Step 5: Build with Gradle
      # Runs the Gradle task to assemble the release APK.
      - name: Build with Gradle
        run: ./gradlew assembleRelease

      # Step 6: Debug APK Directory
      # Outputs the directory structure of the APK folder for troubleshooting purposes.
      - name: Debug APK Directory
        run: ls -R app/build/outputs/apk/release/

      # Step 7: Upload APK file
      # Uploads the generated APK as a build artifact, making it available for download.
      - name: Upload APK file
        uses: actions/upload-artifact@v4.4.3
        with:
          name: KhoroojYar-APK
          path: app/build/outputs/apk/release/*.apk
